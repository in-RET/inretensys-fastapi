{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"inretensys-fastapi \u00b6 What is it? \u00b6 Help for future docs: For full documentation visit mkdocs.org . To be done!","title":"Home"},{"location":"#inretensys-fastapi","text":"","title":"inretensys-fastapi"},{"location":"#what-is-it","text":"Help for future docs: For full documentation visit mkdocs.org . To be done!","title":"What is it?"},{"location":"about/","text":"About inretensys-fastapi \u00b6 Software \u00b6 Build an API with FastAPI to connect a graphical user interface with the inretensys-backend. Team \u00b6 See Institut f\u00fcr Regnerative Energietechnik","title":"About"},{"location":"about/#about-inretensys-fastapi","text":"","title":"About inretensys-fastapi"},{"location":"about/#software","text":"Build an API with FastAPI to connect a graphical user interface with the inretensys-backend.","title":"Software"},{"location":"about/#team","text":"See Institut f\u00fcr Regnerative Energietechnik","title":"Team"},{"location":"release-notes/","text":"Release Notes \u00b6 0.02 Pre-Release (beta) \u00b6 Features \u00b6 Support configurationsfiles in two fileformats, JSON or Binary Support to directly submit data via JSON-Requests Automically solve energysystem via docker Added support for upload to the \"Universit\u00e4tsrechenzentrum Ilmenau\" (login data is required!) Support uploading multiple Files at once also with both filetypes mixed Fixes \u00b6 Fixed loginmask for the UniRZ Splitted solving via docker / ssh in two files for better readability added constants.py for Filetypes, SSH-Addresses, Docker-Imagenames etc. 0.01 Pre-Release (alpha) \u00b6 First implementation.","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#002-pre-release-beta","text":"","title":"0.02 Pre-Release (beta)"},{"location":"release-notes/#features","text":"Support configurationsfiles in two fileformats, JSON or Binary Support to directly submit data via JSON-Requests Automically solve energysystem via docker Added support for upload to the \"Universit\u00e4tsrechenzentrum Ilmenau\" (login data is required!) Support uploading multiple Files at once also with both filetypes mixed","title":"Features"},{"location":"release-notes/#fixes","text":"Fixed loginmask for the UniRZ Splitted solving via docker / ssh in two files for better readability added constants.py for Filetypes, SSH-Addresses, Docker-Imagenames etc.","title":"Fixes"},{"location":"release-notes/#001-pre-release-alpha","text":"First implementation.","title":"0.01 Pre-Release (alpha)"},{"location":"api/api/","text":"API \u00b6 The following documentation describes all possible functions/interfaces to use the Python-FastAPI-API from an Website or other python script.","title":"Overview"},{"location":"api/api/#api","text":"The following documentation describes all possible functions/interfaces to use the Python-FastAPI-API from an Website or other python script.","title":"API"},{"location":"api/functions/","text":"Functions \u00b6 Public Functions \u00b6 URL: \"/\" \u00b6 Generic root-path to render the mainpage. To get an overview of the rendered page see the picture below. Example-GUI for the given API URL: \"/uploadFile\" \u00b6 This path is used by websites which provide a graphical user interface, like the root path of these API. The python function reads all provided datafiles in and runs the simulations depending on the flag 'docker' which is a radio box on the given gui. (See the picture above.) URL: \"/uploadJson\" \u00b6 This path is used the send post-requests where the energysystem is an json-formatted string as data of the request. The python function wraps all given data to the private function 'run_simulation(..)' and returns the given website or HTTPException. All created folders and their names are returned as a Jinja2-Template which is based on the template from the generic path. Every request create one workingdirectory for an energysystem. It is not possible to submit more than one energysystem within one request. Private Functions \u00b6 generate_random_folder() \u00b6 import uuid def generate_random_folder (): return str ( uuid . uuid4 () . hex ) This is a simple helper function to generate an uuid in hex to name and later create folders as workingdirectory. uuid is used to guarantee a unique name. run_simulation(..) \u00b6 Overview \u00b6 The function 'run_simulation' creates all needed workingdirectories - locally or external, creates the given docker-containers with all arguments to run or upload the data to the UniRZ and create a startscript for the user to start solving all submitted energysystems at once. Note UniRZ = Universit\u00e4tsrechenzentrum Ilmenau Deep Dive \u00b6 From the functions above (\"uploadFile\" and \"uploadJson\") given data are tuples. These tuples contains the filedata and the filetype. To create Containers or upload all data it is necessary to loop through these inputdata. for datafile , ftype in input : ... At this point the algorithm has two variables, a datafile and the filetype of these datafile. The not given path or name for the working directory is now created by the function \"generate_random_folder\" from above. The graph below shows the following steps of the code. graph TD A[Start, all data, filetypes and workingdirectory names given] --> B{Run with Docker?}; B --> |Yes| C[create local workingdirectory]; C --> D[write energysystem-data into a configurationfile]; D --> E{check if docker-image exists}; E --> |Yes| F[start docker container with given arguments]; E --> |No| G[raise HTTPException]; F --> H[return HTTPTemplate]; B --> |No| I{check if auth-data is given}; I --> |Yes| J[build jobscript]; J --> O[build startscript]; O --> K[Upload data via SFTP]; K --> L[return HTTPTemplate]; I --> |No| M[raise HTTPException] If the Data is written to the UniRZ the user must start the given script on his own via the interface of the UniRZ.","title":"Functions"},{"location":"api/functions/#functions","text":"","title":"Functions"},{"location":"api/functions/#public-functions","text":"","title":"Public Functions"},{"location":"api/functions/#url","text":"Generic root-path to render the mainpage. To get an overview of the rendered page see the picture below. Example-GUI for the given API","title":"URL: \"/\""},{"location":"api/functions/#url-uploadfile","text":"This path is used by websites which provide a graphical user interface, like the root path of these API. The python function reads all provided datafiles in and runs the simulations depending on the flag 'docker' which is a radio box on the given gui. (See the picture above.)","title":"URL: \"/uploadFile\""},{"location":"api/functions/#url-uploadjson","text":"This path is used the send post-requests where the energysystem is an json-formatted string as data of the request. The python function wraps all given data to the private function 'run_simulation(..)' and returns the given website or HTTPException. All created folders and their names are returned as a Jinja2-Template which is based on the template from the generic path. Every request create one workingdirectory for an energysystem. It is not possible to submit more than one energysystem within one request.","title":"URL: \"/uploadJson\""},{"location":"api/functions/#private-functions","text":"","title":"Private Functions"},{"location":"api/functions/#generate_random_folder","text":"import uuid def generate_random_folder (): return str ( uuid . uuid4 () . hex ) This is a simple helper function to generate an uuid in hex to name and later create folders as workingdirectory. uuid is used to guarantee a unique name.","title":"generate_random_folder()"},{"location":"api/functions/#run_simulation","text":"","title":"run_simulation(..)"},{"location":"api/functions/#overview","text":"The function 'run_simulation' creates all needed workingdirectories - locally or external, creates the given docker-containers with all arguments to run or upload the data to the UniRZ and create a startscript for the user to start solving all submitted energysystems at once. Note UniRZ = Universit\u00e4tsrechenzentrum Ilmenau","title":"Overview"},{"location":"api/functions/#deep-dive","text":"From the functions above (\"uploadFile\" and \"uploadJson\") given data are tuples. These tuples contains the filedata and the filetype. To create Containers or upload all data it is necessary to loop through these inputdata. for datafile , ftype in input : ... At this point the algorithm has two variables, a datafile and the filetype of these datafile. The not given path or name for the working directory is now created by the function \"generate_random_folder\" from above. The graph below shows the following steps of the code. graph TD A[Start, all data, filetypes and workingdirectory names given] --> B{Run with Docker?}; B --> |Yes| C[create local workingdirectory]; C --> D[write energysystem-data into a configurationfile]; D --> E{check if docker-image exists}; E --> |Yes| F[start docker container with given arguments]; E --> |No| G[raise HTTPException]; F --> H[return HTTPTemplate]; B --> |No| I{check if auth-data is given}; I --> |Yes| J[build jobscript]; J --> O[build startscript]; O --> K[Upload data via SFTP]; K --> L[return HTTPTemplate]; I --> |No| M[raise HTTPException] If the Data is written to the UniRZ the user must start the given script on his own via the interface of the UniRZ.","title":"Deep Dive"},{"location":"api/python/","text":"Using within Python-Script \u00b6 If you want to submit a energysystem from an external script, like a Website based on the Django-Framework, its possible with the python-request-package. Therefore its recommend to call the function \"/uploadJson\". An simple example is given below. requests . post ( url = \"http://\" + INRETENSYS_API_HOST + \"/uploadJson/\" , json = inret_em . json (), params = { 'username' : '' , 'password' : '' , 'docker' : True } ) Parameters \u00b6 JSON : Contains the json-data from the energysystem, in the example the object from the class \"InRetEnsysModel\" is named \"inret_em\". PARAMS : Containts a dictionary with three necessary arguments - Username: The Auth-Username for the \"Universit\u00e4tsrechenzentrum Ilmenau\" - Password: The Auth-Password for the \"Universit\u00e4tsrechenzentrum Ilmenau\" - Docker: A Flag, if it is set to True, the Simulations are solve within docker instances and the arguments given before are not required, but must be within the dictionary.","title":"Usage with Python"},{"location":"api/python/#using-within-python-script","text":"If you want to submit a energysystem from an external script, like a Website based on the Django-Framework, its possible with the python-request-package. Therefore its recommend to call the function \"/uploadJson\". An simple example is given below. requests . post ( url = \"http://\" + INRETENSYS_API_HOST + \"/uploadJson/\" , json = inret_em . json (), params = { 'username' : '' , 'password' : '' , 'docker' : True } )","title":"Using within Python-Script"},{"location":"api/python/#parameters","text":"JSON : Contains the json-data from the energysystem, in the example the object from the class \"InRetEnsysModel\" is named \"inret_em\". PARAMS : Containts a dictionary with three necessary arguments - Username: The Auth-Username for the \"Universit\u00e4tsrechenzentrum Ilmenau\" - Password: The Auth-Password for the \"Universit\u00e4tsrechenzentrum Ilmenau\" - Docker: A Flag, if it is set to True, the Simulations are solve within docker instances and the arguments given before are not required, but must be within the dictionary.","title":"Parameters"}]}