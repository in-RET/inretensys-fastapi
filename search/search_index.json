{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"inretensys-fastapi","text":""},{"location":"#what-is-it","title":"What is it?","text":"<p>inretensys-fastapi is an api which is based on FastAPI to connect a graphical user interface with the inretensys-backend.</p> <p>This repository is part of the software package \"inretensys-open-plan-gui\" which is a fork of the open_plan-gui. </p>"},{"location":"#differences-to-open_plan-gui","title":"Differences to open_plan-gui","text":"<p>This package is the backend of the software package. It runs the interface to simulate und optimize generated energymodels from the graphical user interface.</p> <p>It can run as a standalone interface or as part of an docker compose structure.</p>"},{"location":"#installation-and-start","title":"Installation and Start","text":""},{"location":"#standalone-interface","title":"Standalone interface","text":"<p>To run inretensys-fastapi follow these steps.</p> <ul> <li>create a virtual environment for python (version &gt; 3.8) <pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n</code></pre></li> <li> <p>install the requirements <pre><code>$ pip install -r requirements.txt\n</code></pre> For the following steps you need an energysystem as binary or json file. How you generate these files please see inretensys-backend.</p> </li> <li> <p>start the api with the following command to get an overview <pre><code>$ uvicorn api.api:app --reload #for debugging\n</code></pre> After this step the webinterface is started and you can use the displayed link in your command line window.</p> </li> </ul>"},{"location":"#docker-compose","title":"Docker compose","text":"<p>If you want to use docker to run the sofware package \"InRetEnsys\" it recommend to see the inretensys-common repository. This repository contains all needed information.</p>"},{"location":"about/","title":"About inretensys-fastapi","text":""},{"location":"about/#software","title":"Software","text":"<p>Build an API with FastAPI to connect a graphical user interface with the inretensys-backend.</p>"},{"location":"about/#team","title":"Team","text":"<p>See Institut f\u00fcr Regnerative Energietechnik</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#002-pre-release-beta","title":"0.02 Pre-Release (beta)","text":""},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>Support configurationsfiles in two fileformats, JSON or Binary</li> <li>Support to directly submit data via JSON-Requests</li> <li>Automically solve energysystem via docker</li> <li>Added support for upload to the \"Universit\u00e4tsrechenzentrum Ilmenau\" (login data is required!)</li> <li>Support uploading multiple Files at once also with both filetypes mixed</li> </ul>"},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>Fixed loginmask for the UniRZ</li> <li>Splitted solving via docker / ssh in two files for better readability</li> <li>added constants.py for Filetypes, SSH-Addresses, Docker-Imagenames etc.</li> </ul>"},{"location":"release-notes/#001-pre-release-alpha","title":"0.01 Pre-Release (alpha)","text":"<p>First implementation.</p>"},{"location":"api/api/","title":"API","text":"<p>The following documentation describes all possible functions/interfaces to use the Python-FastAPI-API from an Website or other python script.</p>"},{"location":"api/functions/","title":"Functions","text":""},{"location":"api/functions/#public-functions","title":"Public Functions","text":""},{"location":"api/functions/#url","title":"URL: \"/\"","text":"<p>Generic root-path to render the mainpage. To get an overview of the rendered page see the picture below.</p> <p> </p> Example-GUI for the given API"},{"location":"api/functions/#url-uploadfile","title":"URL: \"/uploadFile\"","text":"<p>This path is used by websites which provide a graphical user interface, like the root path of these API.</p> <p>The python function reads all provided datafiles in and runs the simulations depending on the flag 'docker' which is a radio box on the given gui. (See the picture above.) Listed below is the a code example for the graphical user interface above.</p> <pre><code>&lt;div class=\"row\"&gt;\n&lt;div&gt;\n&lt;h1&gt;Upload verschiedener Dateiformate&lt;/h1&gt;\n&lt;form action=\"/uploadFile\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;h5&gt;Daten des Energiesystems&lt;/h5&gt;\n&lt;div class=\"mb-3\"&gt;\n&lt;label for=\"datafile\" class=\"form-label\"&gt;Konfigurationsdatei&lt;/label&gt;\n&lt;input class=\"form-control\" name=\"datafiles\" type=\"file\" id=\"datafile\" multiple=\"multiple\"&gt;&lt;br /&gt;\n&lt;div onchange=toggle\\_login\\_form()&gt;\n&lt;h5&gt;Ausf\u00fchrungsmethode&lt;/h5&gt;\n&lt;div class=\"form-check\"&gt;\n&lt;label class=\"form-check-label\" for=\"docker\"&gt;Run with Docker&lt;/label&gt;\n&lt;input class=\"form-check-input\" type=\"radio\" name=\"docker\" id=\"docker\" value=\"docker\" checked&gt;\n&lt;/div&gt;\n&lt;div class=\"form-check\"&gt;\n&lt;label class=\"form-check-label\" for=\"ssh\"&gt;Run with SSH&lt;/label&gt;\n&lt;input class=\"form-check-input\" type=\"radio\" name=\"docker\" id=\"ssh\" value=\"ssh\"&gt; \n&lt;/div&gt;&lt;br/&gt;\n&lt;div class=\"mb-3 row\" id=\"loginform\" hidden&gt;\n&lt;h5&gt;Logindaten Universit\u00e4tsrechenzentrum&lt;/h5&gt;\n&lt;div   class=\"col\"&gt;\n&lt;label for=\"username\" class=\"form-label\"&gt;Username&lt;/label&gt;\n&lt;input type=\"username\" class=\"form-control\" name=\"username\" id=\"username\" placeholder=\"Nutzername\"&gt;\n&lt;/div&gt;\n&lt;div class=\"col\"&gt;\n&lt;label for=\"password\" class=\"form-label\"&gt;Email address&lt;/label&gt;\n&lt;input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" placeholder=\"Password\"&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;&lt;br /&gt;\n&lt;button class=\"btn btn-outline-success form-control\" type=\"submit\"&gt;Run Simulation&lt;/button&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Note</p> <p>The submitted file can be a generated binary or json file. Therefore the binary file must be in binary-encoding and the JSON-file as regular utf-8 encoded file.</p>"},{"location":"api/functions/#url-uploadjson","title":"URL: \"/uploadJson\"","text":"<p>This path is used the send post-requests where the energysystem is an json-formatted string as data of the request.</p> <p>The python function wraps all given data to the private function 'run_simulation(..)' and returns the generated website with a list of foldernames, which are the current working directories or a HTTPException. All created folders and their names are returned as a Jinja2-Template which is based on the template from the generic path.</p> <p>Note</p> <p>Every request create one workingdirectory for an energysystem.  It is not possible to submit more than one energysystem within one request.</p>"},{"location":"api/functions/#private-functions","title":"Private Functions","text":""},{"location":"api/functions/#generate_random_folder","title":"generate_random_folder()","text":"<p><pre><code>import uuid\ndef generate_random_folder():\nreturn str(uuid.uuid4().hex)\n</code></pre> This is a simple helper function to generate an uuid in hex to name and later create folders as workingdirectory. uuid is used to guarantee a unique name.</p>"},{"location":"api/functions/#run_simulation","title":"run_simulation(..)","text":""},{"location":"api/functions/#overview","title":"Overview","text":"<p>The function 'run_simulation' creates all needed workingdirectories - locally or external, creates the given docker-containers with all arguments to run or upload the data to the UniRZ and create a startscript for the user to start solving all submitted energysystems at once.</p> <p>Note</p> <p>UniRZ = Universit\u00e4tsrechenzentrum Ilmenau</p>"},{"location":"api/functions/#deep-dive","title":"Deep Dive","text":"<p>From the functions above (\"uploadFile\" and \"uploadJson\") given data are tuples.  These tuples contains the filedata and the filetype.</p> <p>To create Containers or upload all data it is necessary to loop through these inputdata.</p> <pre><code>for datafile, ftype in input:\n...\n</code></pre> <p>At this point the algorithm has two variables, a datafile and the filetype of these datafile. The not given path or name for the working directory is now created by the function \"generate_random_folder\" from above.</p> <p>The graph below shows the following steps of the code.</p> <pre><code>graph TD\n  A[Start, all data, filetypes and workingdirectory names given] --&gt; B{Run with Docker?};\n  B --&gt; |Yes| C[create local workingdirectory];\n  C --&gt; D[write energysystem-data into a configurationfile];\n  D --&gt; E{check if docker-image exists};\n  E --&gt; |Yes| F[start docker container with given arguments];\n  E --&gt; |No| G[raise HTTPException];\n  F --&gt; H[return HTTPTemplate];\n  B --&gt; |No| I{check if auth-data is given};\n  I --&gt; |Yes| J[build jobscript];\n  J --&gt; O[build startscript];\n  O --&gt; K[Upload data via SFTP];\n  K --&gt; L[return HTTPTemplate];\n  I --&gt; |No| M[raise HTTPException]</code></pre> <p>If the Data is written to the UniRZ the user must start the given script by his own at the UniRZ. This is possible with the job submissions commands which are documented at this Website.</p>"},{"location":"api/python/","title":"Usage with Python","text":""},{"location":"api/python/#using-within-python-script","title":"Using within Python-Script","text":"<p>If you want to submit an energysystem from an external script, like a Website based on the Django-Framework, its possible with the python-request-package.</p> <p>Therefore its recommend to call the function \"/uploadJson\". An simple example is given below.</p> <pre><code>INRETENSYS_API_HOST = \"http://localhost:8000\"\nrequests.post(\nurl=INRETENSYS_API_HOST+\"/uploadJson/\", \njson=inret_em.json(), \nparams={'username': '', 'password': '', 'docker': True}\n)\n</code></pre>"},{"location":"api/python/#parameters","title":"Parameters","text":"<p>JSON: Contains the json-data from the energysystem, in the example the object from the class \"InRetEnsysModel\" is named \"inret_em\".</p> <p>PARAMS: Containts a dictionary with three necessary arguments - Username: The Auth-Username for the \"Universit\u00e4tsrechenzentrum Ilmenau\" - Password: The Auth-Password for the \"Universit\u00e4tsrechenzentrum Ilmenau\" - Docker: A Flag, if it is set to True, the Simulations are solve within docker instances and the arguments given before are not required</p>"}]}